// ==UserScript==
// @name         Pop Mart API POST with Dynamic Payload Structure
// @namespace    http://tampermonkey.net/
// @version      0.4
// @description  Demonstrates a POST request to Pop Mart API using the identified payload structure
// @author       You
// @match        https://www.popmart.com/us/pop-now/set/*
// @grant        GM_xmlhttpRequest
// @connect      prod-global-api.popmart.com
// ==/UserScript==

(function() {
    'use strict';

    function makePostRequest() {
        // --- Dynamic Values ---
        // 1. set_no: This might come from the current page URL, a data attribute, or user input.
        //    For example, to get '268' from 'https://www.popmart.com/us/pop-now/set/268':
        let currentSetNo = window.location.pathname.split('/').pop(); // Example: gets '268'
        //    The API might expect the '10001132601876' format. You need to determine how to get the correct set_no.
        //    For this example, we'll use the one you provided, but in a real scenario, it needs to be dynamic.
        const set_no_for_api = "10001132601876"; // Placeholder - MAKE THIS DYNAMIC BASED ON CONTEXT

        // 2. t: Current Unix timestamp (seconds since epoch)
        const timestamp = Math.floor(Date.now() / 1000);

        // 3. s: Signature - THIS IS THE HARDEST PART.
        //    This value is generated by the website's JavaScript.
        //    You CANNOT just hardcode the example "s" value; it will quickly become invalid.
        //    To make this work, you would need to:
        //    a) Reverse-engineer how Pop Mart's JavaScript creates this signature (very difficult).
        //    b) Find if the current signature is available in a JavaScript variable on the page
        //       or if another API call provides it (less likely for this kind of signature).
        //    c) If you cannot generate/find 's', this request will likely fail with an auth/security error.
        const signature_s = "2a67d7564a4282f9d8e034151fbc0fd1"; // EXTREMELY LIKELY TO BE INVALID - NEEDS DYNAMIC GENERATION/EXTRACTION

        if (set_no_for_api === "10001132601876" && signature_s === "2a67d7564a4282f9d8e034151fbc0fd1") {
            console.warn("Using placeholder 'set_no' and 's' from the example. The 's' value is almost certainly stale and will cause the request to fail. You need to find a way to generate/fetch a current 's' value.");
            alert("Warning: The script is using a placeholder 's' (signature) value which will likely cause the API request to fail. See console for details.");
        }

        const postData = {
            "set_no": set_no_for_api, // Use the dynamically determined set number
            "s": signature_s,         // Use the dynamically generated/extracted signature
            "t": timestamp            // Use the current timestamp
        };

        const requestHeaders = {
            'accept': 'application/json, text/plain, */*',
            'accept-language': 'en-US,en;q=0.9',
            'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6Im5hdXMiLCJ0eXAiOiJKV1QifQ.eyJnaWQiOiIyOTg3MDI0Iiwibmlja25hbWUiOiJicmRheWF1b24iLCJhdmF0YXIiOiIiLCJ2aXBMZXZlbCI6MCwicm9sZSI6IlVzZXIiLCJhcHBJRCI6MSwiYXBwQ29kZSI6MCwicHJvdmlkZXJUeXBlIjoiZ29vZ2xlIiwibG9naW5BdCI6MTc0MzQ3Njk1OSwic2hvd0lEIjoiODAwNjQ5OTE1OTAwNTM3Njg3NzM4NiIsInByb2plY3RJZCI6Im5hdXMiLCJwcm92aWRlcklEIjoiYnJkYXlhdW9uQGdtYWlsLmNvbSIsInByb3ZpZGVyIjoiIn0.DGpBN1WbiJeZk97JkMdHIcQw6DguxSQe3uFYUanmmi4', // THIS TOKEN WILL EXPIRE!
            'clientkey': 'nw3b089qrgw9m7b7i',
            'content-type': 'application/json',
            'country': 'US',
            'did': 'r1XyC791-j4H3-m40v-599Y-4jI6dXM849Kk',
            'grey-secret': 'null',
            'language': 'en',
            'td-session-key': 'mWPU71747197740h35xLp92Xma',
            'td-session-path': '/shop/v1/box/box_set/preview',
            'td-session-sign': 'w395b6c4afb4da560649a82621bd58806dgsjkyaUtbKBKXZXJCMNVLXhIqL6OKMJMCM90b283bae2c8f22ed733cd3504203ba624465e1d8cee9fd14fc5270e52d0a9c190000dfcddf2bbb92120c6b8473e519ff8fd9f',
            'tz': 'America/Los_Angeles',
            'x-client-country': 'US',
            'x-client-namespace': 'america',
            'x-device-os-type': 'web',
            'x-project-id': 'naus',
            'x-sign': '3bae6062d18501f4de95f59d83525bd6,1747197783' // This x-sign also looks like it includes a signature and a timestamp
        };

        // The 'x-sign' header itself might also be dynamic and related to 's' and 't'
        // or other request data. It's common for APIs to have multiple layers of security.

        GM_xmlhttpRequest({
            method: 'POST',
            url: 'https://prod-global-api.popmart.com/shop/v1/box/box_set/preview',
            headers: requestHeaders,
            data: JSON.stringify(postData),
            responseType: 'json',
            onload: function(response) {
                console.log('POST Request Succeeded:');
                console.log('Status:', response.status);
                console.log('Response Data:', response.response);
                alert('Success! Check the console for details. Response data logged.');
            },
            onerror: function(response) {
                console.error('POST Request Failed:');
                console.error('Status:', response.status);
                console.error('Status Text:', response.statusText);
                console.error('Response Data:', response.response);
                console.error('Error Details:', response.error);
                alert('Error! Check the console for details.');
            },
            ontimeout: function() {
                console.error('POST Request Timed Out.');
                alert('Request timed out.');
            }
        });
    }

    const triggerButton = document.createElement('button');
    triggerButton.textContent = 'Make Pop Mart Set Preview POST (Dynamic Payload Attempt)';
    triggerButton.style.position = 'fixed';
    triggerButton.style.bottom = '20px';
    triggerButton.style.right = '20px';
    triggerButton.style.zIndex = '9999';
    triggerButton.style.padding = '10px 15px';
    triggerButton.style.backgroundColor = '#FF5722'; // Deep Orange color
    triggerButton.style.color = 'white';
    triggerButton.style.border = 'none';
    triggerButton.style.borderRadius = '5px';
    triggerButton.style.cursor = 'pointer';
    triggerButton.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';

    triggerButton.addEventListener('click', makePostRequest);
    document.body.appendChild(triggerButton);

    console.log('Pop Mart API POST script (with dynamic payload structure) loaded.');
    console.log("Reminder: The 's' (signature) value in the payload is CRITICAL and needs to be dynamically generated or extracted. The current script uses a placeholder that will likely fail.");

})();

(function() {
    'use strict';

    function addItemsToCart() {
        // --- CRITICAL: Define the box_list dynamically ---
        // This array needs to be populated with the specific items you want to add.
        // Each item's details (spu_ext_id, spu_id, sku_id, set_no, box_id, position)
        // must be obtained from the webpage, likely when a user selects an item.
        // The 'box_id' is especially important and likely very dynamic.
        const exampleBoxList = [
            // This is an EXAMPLE structure based on your payload.
            // You MUST replace this with actual, dynamically obtained item data.
            {
                "spu_ext_id": 268,        // Example value
                "spu_id": 2784,           // Example value
                "sku_id": 4150,           // Example value
                "set_no": "10001132101876",// Example value
                "box_id": "TxkfcgDz5Jq7RnVU5qsq5A==", // EXAMPLE - THIS MUST BE DYNAMIC for each item
                "position": 1
            },
            // Add more items as needed, e.g.:
            // {
            //     "spu_ext_id": 268,
            //     "spu_id": 2784,
            //     "sku_id": 4150,
            //     "set_no": "10001132101876",
            //     "box_id": "BhwgOYRU7F3RcAh57Ca4gg==", // EXAMPLE - DYNAMIC
            //     "position": 2
            // }
        ];

        if (exampleBoxList.length === 0) {
            alert("Error: Box list is empty. You need to define which items to add.");
            console.error("box_list is empty. Populate it with item data.");
            return;
        }
        console.warn("Using example item data in box_list. This needs to be replaced with dynamically obtained item details, especially 'box_id'.");


        // --- Dynamic Signature and Timestamp for the payload ---
        const timestamp = Math.floor(Date.now() / 1000);
        const signature_s = "76d97b4a2158555ad3deab80b2b95cb3"; // CRITICAL: THIS IS A STALE EXAMPLE AND WILL FAIL. Needs dynamic generation.

        if (signature_s === "76d97b4a2158555ad3deab80b2b95cb3") {
            console.warn("Using a STALE 's' (signature) value from the example. This request WILL LIKELY FAIL. 's' must be dynamically generated.");
            alert("Warning: The script is using a placeholder 's' (signature) value for the payload, which will likely cause the API request to fail.");
        }

        const postData = {
            "box_list": exampleBoxList,
            "s": signature_s,
            "t": timestamp
        };

        // --- Request Headers ---
        // Many of these are session-specific and dynamic.
        // The Authorization token WILL EXPIRE.
        // td-session-key, td-session-sign, x-sign, did are also dynamic.
        const requestHeaders = {
            'accept': 'application/json, text/plain, */*',
            'accept-language': 'en-US,en;q=0.9',
            'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6Im5hdXMiLCJ0eXAiOiJKV1QifQ.eyJnaWQiOiIyOTg3MDI0Iiwibmlja25hbWUiOiJicmRheWF1b24iLCJhdmF0YXIiOiIiLCJ2aXBMZXZlbCI6MCwicm9sZSI6IlVzZXIiLCJhcHBJRCI6MSwiYXBwQ29kZSI6MCwicHJvdmlkZXJUeXBlIjoiZ29vZ2xlIiwibG9naW5BdCI6MTc0MzQ3Njk1OSwic2hvd0lEIjoiODAwNjQ5OTE1OTAwNTM3Njg3NzM4NiIsInByb2plY3RJZCI6Im5hdXMiLCJwcm92aWRlcklEIjoiYnJkYXlhdW9uQGdtYWlsLmNvbSIsInByb3ZpZGVyIjoiIn0.DGpBN1WbiJeZk97JkMdHIcQw6DguxSQe3uFYUanmmi4', // STALE TOKEN
            'clientkey': 'nw3b089qrgw9m7b7i',
            'content-type': 'application/json',
            'country': 'US',
            'did': 'r1XyC791-j4H3-m40v-599Y-4jI6dXM849Kk', // Example 'did', likely dynamic
            'grey-secret': 'null',
            'language': 'en',
            'origin': 'https://www.popmart.com', // Usually set by browser, but included as it was in your list
            'referer': 'https://www.popmart.com/',   // Usually set by browser
            'td-session-key': 'sWPUU1747198419aMaSf7uNUz5', // STALE EXAMPLE - DYNAMIC
            'td-session-path': '/shop/v1/box/boxCart/addBoxListToCart', // May need to match current action
            'td-session-sign': 'w374a98e21c1462c286487a1308da3d97be9ty38x2sYSYOIOTPFDAUOrcNUXvYFTFPFd07143f3e63c7e827333111a0519393163e4232fd6498595b52b25dfd7c3cc6f70000fd5d72243ce8c4f3f9c0d36f50ceb66aa', // STALE EXAMPLE - DYNAMIC
            'tz': 'America/Los_Angeles',
            'x-client-country': 'US',
            'x-client-namespace': 'america',
            'x-device-os-type': 'web',
            'x-project-id': 'naus',
            'x-sign': 'bb4aff7e88febe4b896be9d87633d057,1747199057' // STALE EXAMPLE - DYNAMIC (signature & timestamp)
        };

        console.warn("Using STALE example values for many headers (Authorization, td-session-key, td-session-sign, x-sign, did). These MUST be current for the request to succeed.");

        GM_xmlhttpRequest({
            method: 'POST',
            url: 'https://prod-global-api.popmart.com/shop/v1/box/boxCart/addBoxListToCart',
            headers: requestHeaders,
            data: JSON.stringify(postData),
            responseType: 'json',
            onload: function(response) {
                console.log('Add to Cart Request Succeeded (or API processed it):');
                console.log('Status:', response.status);
                console.log('Response Headers:', response.responseHeaders);
                console.log('Response Data:', response.response); // Check this for success/error messages from the API
                // The 'kratos-status-code' in the response headers (e.g., 880101 from your example)
                // will likely indicate the true success or specific error type.
                if (response.response && response.response.code === 0) { // Assuming 'code: 0' means success, common pattern
                    alert('Items likely added to cart! Check API response. Kratos Status: ' + response.responseHeaders['kratos-status-code']);
                } else {
                    alert('Add to cart API call made, but check console for API-level errors. Kratos Status: ' + response.responseHeaders['kratos-status-code']);
                }
            },
            onerror: function(response) {
                console.error('Add to Cart Request Failed (Network/HTTP Error):');
                console.error('Status:', response.status);
                console.error('Status Text:', response.statusText);
                console.error('Response Data:', response.response);
                console.error('Error Details:', response.error);
                alert('Error making Add to Cart request! Check the console.');
            },
            ontimeout: function() {
                console.error('Add to Cart Request Timed Out.');
                alert('Request timed out.');
            }
        });
    }

    // --- How to trigger the request ---
    // This example adds a button to the page.
    // You'll need to integrate the logic for selecting items and building `exampleBoxList`.
    const triggerButton = document.createElement('button');
    triggerButton.textContent = 'Add Example Items to Cart (API)';
    triggerButton.style.position = 'fixed';
    triggerButton.style.bottom = '60px'; // Adjusted position
    triggerButton.style.right = '20px';
    triggerButton.style.zIndex = '10000'; // Ensure it's on top
    triggerButton.style.padding = '10px 15px';
    triggerButton.style.backgroundColor = '#4CAF50'; // Green color
    triggerButton.style.color = 'white';
    triggerButton.style.border = 'none';
    triggerButton.style.borderRadius = '5px';
    triggerButton.style.cursor = 'pointer';
    triggerButton.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';

    triggerButton.addEventListener('click', function() {
        // In a real script, you would build `exampleBoxList` here based on user selections
        // or other logic before calling `addItemsToCart()`.
        addItemsToCart();
    });
    document.body.appendChild(triggerButton);

    console.log('Pop Mart Add to Cart script loaded. Ensure item data and dynamic values (signatures, tokens) are handled correctly.');

})();
